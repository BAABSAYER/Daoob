# Check the main.dart file
cat lib/main.dart
zsh: command not found: #
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'package:eventora_app/config/theme.dart';
import 'package:eventora_app/screens/app_wrapper.dart';
import 'package:eventora_app/screens/auth/auth_wrapper.dart';
import 'package:eventora_app/screens/splash_screen.dart';
import 'package:eventora_app/services/auth_service.dart';
import 'package:eventora_app/services/vendor_service.dart';
import 'package:eventora_app/services/booking_service.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  
  // Set preferred orientations to portrait only
  SystemChrome.setPreferredOrientations([
    DeviceOrientation.portraitUp,
    DeviceOrientation.portraitDown,
  ]);
  
  // Set system UI overlay style
  SystemChrome.setSystemUIOverlayStyle(const SystemUiOverlayStyle(
    statusBarColor: Colors.transparent,
    statusBarIconBrightness: Brightness.dark,
    systemNavigationBarColor: Colors.white,
    systemNavigationBarIconBrightness: Brightness.dark,
  ));
  
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => AuthService()),
        ChangeNotifierProvider(create: (_) => VendorService()),
        ChangeNotifierProvider(create: (_) => BookingService()),
      ],
      child: MaterialApp(
        title: 'DAOOB',
        debugShowCheckedModeBanner: false,
        theme: AppTheme.getTheme(),
        home: const AppStartup(),
      ),
    );
  }
}

class AppStartup extends StatefulWidget {
  const AppStartup({Key? key}) : super(key: key);

  @override
  State<AppStartup> createState() => _AppStartupState();
}

class _AppStartupState extends State<AppStartup> {
  bool _isInitialized = false;
  
  @override
  void initState() {
    super.initState();
    _initializeApp();
  }
  
  Future<void> _initializeApp() async {
    // Simulate app initialization with a delay
    await Future.delayed(const Duration(seconds: 2));
    
    // Check if the user is already logged in
    final authService = Provider.of<AuthService>(context, listen: false);
    await authService.checkAuthStatus();
    
    setState(() {
      _isInitialized = true;
    });
  }
  
  @override
  Widget build(BuildContext context) {
    if (!_isInitialized) {
      return const SplashScreen();
    }
    
    return Consumer<AuthService>(
      builder: (context, authService, _) {
        if (authService.isLoading) {
          return const SplashScreen();
        }
        
        if (authService.isLoggedIn) {
          return const AppWrapper();
        } else {
          return const AuthWrapper();
        }
      },
    );
  }
}%                                                        
dell@MacBookAir eventora_mobile % # Look at a few key files that might have issues
cat lib/main.dart
cat lib/services/api_service.dart
zsh: command not found: #
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'package:eventora_app/config/theme.dart';
import 'package:eventora_app/screens/app_wrapper.dart';
import 'package:eventora_app/screens/auth/auth_wrapper.dart';
import 'package:eventora_app/screens/splash_screen.dart';
import 'package:eventora_app/services/auth_service.dart';
import 'package:eventora_app/services/vendor_service.dart';
import 'package:eventora_app/services/booking_service.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  
  // Set preferred orientations to portrait only
  SystemChrome.setPreferredOrientations([
    DeviceOrientation.portraitUp,
    DeviceOrientation.portraitDown,
  ]);
  
  // Set system UI overlay style
  SystemChrome.setSystemUIOverlayStyle(const SystemUiOverlayStyle(
    statusBarColor: Colors.transparent,
    statusBarIconBrightness: Brightness.dark,
    systemNavigationBarColor: Colors.white,
    systemNavigationBarIconBrightness: Brightness.dark,
  ));
  
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => AuthService()),
        ChangeNotifierProvider(create: (_) => VendorService()),
        ChangeNotifierProvider(create: (_) => BookingService()),
      ],
      child: MaterialApp(
        title: 'DAOOB',
        debugShowCheckedModeBanner: false,
        theme: AppTheme.getTheme(),
        home: const AppStartup(),
      ),
    );
  }
}

class AppStartup extends StatefulWidget {
  const AppStartup({Key? key}) : super(key: key);

  @override
  State<AppStartup> createState() => _AppStartupState();
}

class _AppStartupState extends State<AppStartup> {
  bool _isInitialized = false;
  
  @override
  void initState() {
    super.initState();
    _initializeApp();
  }
  
  Future<void> _initializeApp() async {
    // Simulate app initialization with a delay
    await Future.delayed(const Duration(seconds: 2));
    
    // Check if the user is already logged in
    final authService = Provider.of<AuthService>(context, listen: false);
    await authService.checkAuthStatus();
    
    setState(() {
      _isInitialized = true;
    });
  }
  
  @override
  Widget build(BuildContext context) {
    if (!_isInitialized) {
      return const SplashScreen();
    }
    
    return Consumer<AuthService>(
      builder: (context, authService, _) {
        if (authService.isLoading) {
          return const SplashScreen();
        }
        
        if (authService.isLoggedIn) {
          return const AppWrapper();
        } else {
          return const AuthWrapper();
        }
      },
    );
  }
}import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:http/http.dart' as http;
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class ApiService {
  static const String baseUrl =
      'https://192.168.1.166:5000/api'; // Replace with your deployed app URL
  static const _storage = FlutterSecureStorage();

  // HTTP GET request with authorization
  static Future<Map<String, dynamic>> get(String endpoint) async {
    try {
      final token = await _storage.read(key: 'auth_token');
      final response = await http.get(
        Uri.parse('$baseUrl$endpoint'),
        headers: _getHeaders(token),
      );

      return _handleResponse(response);
    } catch (e) {
      debugPrint('GET request error: $e');
      rethrow;
    }
  }

  // HTTP POST request with authorization
  static Future<Map<String, dynamic>> post(
      String endpoint, dynamic data) async {
    try {
      final token = await _storage.read(key: 'auth_token');
      final response = await http.post(
        Uri.parse('$baseUrl$endpoint'),
        headers: _getHeaders(token),
        body: json.encode(data),
      );

      return _handleResponse(response);
    } catch (e) {
      debugPrint('POST request error: $e');
      rethrow;
    }
  }

  // HTTP PUT request with authorization
  static Future<Map<String, dynamic>> put(String endpoint, dynamic data) async {
    try {
      final token = await _storage.read(key: 'auth_token');
      final response = await http.put(
        Uri.parse('$baseUrl$endpoint'),
        headers: _getHeaders(token),
        body: json.encode(data),
      );

      return _handleResponse(response);
    } catch (e) {
      debugPrint('PUT request error: $e');
      rethrow;
    }
  }

  // HTTP DELETE request with authorization
  static Future<Map<String, dynamic>> delete(String endpoint) async {
    try {
      final token = await _storage.read(key: 'auth_token');
      final response = await http.delete(
        Uri.parse('$baseUrl$endpoint'),
        headers: _getHeaders(token),
      );

      return _handleResponse(response);
    } catch (e) {
      debugPrint('DELETE request error: $e');
      rethrow;
    }
  }

  // Helper method to get request headers
  static Map<String, String> _getHeaders(String? token) {
    final headers = {
      'Content-Type': 'application/json',
    };

    if (token != null) {
      headers['Authorization'] = 'Bearer $token';
    }

    return headers;
  }

  // Helper method to handle HTTP responses
  static Map<String, dynamic> _handleResponse(http.Response response) {
    if (response.statusCode >= 200 && response.statusCode < 300) {
      if (response.body.isEmpty) {
        return {};
      }
      return json.decode(response.body);
    } else if (response.statusCode == 401) {
      throw Exception('Unauthorized access. Please login again.');
    } else {
      try {
        final errorJson = json.decode(response.body);
        final errorMessage = errorJson['message'] ?? 'An error occurred';
        throw Exception(errorMessage);
      } catch (e) {
        throw Exception('Request failed with status: ${response.statusCode}');
      }
    }
  }
}
dell@MacBookAir eventora_mobile % 