}
mstech@mstech-MINI-S:~/Daoob$ # Create the admin script with proper escaping for bash
cat > create-admin-user.ts << 'EOF'
import { db } from './server/db';
import { users, adminPermissions, ADMIN_PERMISSIONS } from './shared/schema';
import { scrypt, randomBytes } from 'crypto';
import { promisify } from 'util';
import { eq } from 'drizzle-orm';

const scryptAsync = promisify(scrypt);

async function hashPassword(password: string) {
  const salt = randomBytes(16).toString('hex');
  const buf = await scryptAsync(password, salt, 64) as Buffer;
  return `${buf.toString('hex')}.${salt}`;
}

async function createAdmin() {
  try {
    // Check if admin already exists
    const existingAdmin = await db
      .select()
      .from(users)
      .where(eq(users.username, 'admin'));
    
    if (existingAdmin.length > 0) {
      console.log('Admin user already exists');
      return;
    }
    
    // Create admin user
    const hashedPassword = await hashPassword('password');
    
    const adminUser = await db
      .insert(users)
      .values({
        username: 'admin',
        password: hashedPassword,
        email: 'admin@example.com',
        fullName: 'Admin User',
        userType: 'admin',
        createdAt: new Date()
      })
      .returning();
    
    console.log('Admin user created:', adminUser[0]);
    
    // Add admin permissions
    const permissions = Object.values(ADMIN_PERMISSIONS);
    
    for (const permission of permissions) {
      await db
        .insert(adminPermissions)
        .values({
EOFateAdmin();ror('Error creating admin:', error);
mstech@mstech-MINI-S:~/Daoob$ cat > create-admin-user.ts << 'EOF'
import { db } from './server/d

mstech@mstech-MINI-S:~/Daoob$ # Create a simplified user creation script
cat > create-users.ts << 'EOF'
import { Pool } from 'pg';
import * as dotenv from 'dotenv';
import { scrypt, randomBytes } from 'crypto';
import { promisify } from 'util';

// Load environment variables
dotenv.config();

// Ensure DATABASE_URL is set
if (!process.env.DATABASE_URL) {
  console.error('DATABASE_URL environment variable is not set');
  process.exit(1);
}

const scryptAsync = promisify(scrypt);

async function hashPassword(password: string) {
  const salt = randomBytes(16).toString('hex');
  const buf = await scryptAsync(password, salt, 64) as Buffer;
  return `${buf.toString('hex')}.${salt}`;
}

async function createUsers() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL
  });

  try {
    // Check if admin already exists
    const adminCheck = await pool.query(
      'SELECT * FROM users WHERE username = $1',
      ['admin']
    );
    
    if (adminCheck.rows.length === 0) {
      // Create admin user
      const hashedAdminPassword = await hashPassword('password');
      
      const adminResult = await pool.query(
        `INSERT INTO users (username, password, email, "fullName", "userType", "createdAt") 
         VALUES ($1, $2, $3, $4, $5, $6) RETURNING *`,
        ['admin', hashedAdminPassword, 'admin@example.com', 'Admin User', 'admin', new Date()]
      );
      
      const adminUser = adminResult.rows[0];
      console.log('Admin user created:', adminUser);
      
      // Add admin permissions
      const permissions = [
        'manage_event_types',
        'view_event_requests',
EOFateUsers();ction);ror creating users:', error);.rows[0]); 'Demo User', 'client', new Date()]t") 
mstech@mstech-MINI-S:~/Daoob$ # Make sure environment variables are set
export DATABASE_URL=postgres://mstech:daoob123@localhost:5432/daoob_local

# Run the script
npx tsx create-users.ts
/home/mstech/Daoob/create-users.ts:1
import { Pool } from 'pg';
         ^

SyntaxError: The requested module 'pg' does not provide an export named 'Pool'
    at ModuleJob._instantiate (node:internal/modules/esm/module_job:175:21)
    at async ModuleJob.run (node:internal/modules/esm/module_job:258:5)
    at async ModuleLoader.import (node:internal/modules/esm/loader:540:24)
    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:117:5)

Node.js v20.19.0
mstech@mstech-MINI-S:~/Daoob$ # Use psql to check if users were created
psql $DATABASE_URL -c "SELECT id, username, \"userType\", email FROM users;"

# Check admin permissions
psql $DATABASE_URL -c "SELECT * FROM admin_permissions;"
ERROR:  column "userType" does not exist
LINE 1: SELECT id, username, "userType", email FROM users;
                             ^
HINT:  Perhaps you meant to reference the column "users.user_type".
 id | user_id | permission | granted | granted_by | created_at | updated_at 
----+---------+------------+---------+------------+------------+------------
(0 rows)

